// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Styles from "@material-ui/styles";

function clsx(classNames) {
  return List.fold_left((function (classes, cls) {
                return "" + (String(classes) + (" " + (String(cls) + "")));
              }), "", classNames);
}

function toFloat(prim) {
  return prim;
}

function toInt(prim) {
  return prim | 0;
}

function toStr(prim) {
  return String(prim);
}

function vw($$int) {
  return String($$int) + "vw";
}

function vh($$int) {
  return String($$int) + "vh";
}

function px($$int) {
  return String($$int) + "px";
}

function pct($$int) {
  return String($$int) + "%";
}

function deg($$int) {
  return String($$int) + "deg";
}

function ms($$int) {
  return String($$int) + "ms";
}

function backgroundColor(str) {
  return /* tuple */[
          "backgroundColor",
          str
        ];
}

function width(str) {
  return /* tuple */[
          "width",
          str
        ];
}

function height(str) {
  return /* tuple */[
          "height",
          str
        ];
}

function overflow(str) {
  return /* tuple */[
          "overflow",
          str
        ];
}

function display(str) {
  return /* tuple */[
          "display",
          str
        ];
}

function flexDirection(str) {
  return /* tuple */[
          "flex-direction",
          str
        ];
}

function alignItems(str) {
  return /* tuple */[
          "align-items",
          str
        ];
}

function padding(pad) {
  var getPaddingStr = function (str, p) {
    return str + (", " + p);
  };
  var paddingStr = List.fold_left(getPaddingStr, "", pad);
  return /* tuple */[
          "padding",
          paddingStr
        ];
}

function transition(str) {
  return /* tuple */[
          "transition",
          str
        ];
}

function transform(str) {
  return /* tuple */[
          "transfrom",
          str
        ];
}

function zIndex(index) {
  return /* tuple */[
          "z-index",
          String(index)
        ];
}

function margin(marg) {
  var getMarginStr = function (str, m) {
    return str + (", " + m);
  };
  var marginStr = List.fold_left(getMarginStr, "", marg);
  return /* tuple */[
          "margin",
          marginStr
        ];
}

function animationDuration(str) {
  return /* tuple */[
          "animation-duration",
          str
        ];
}

function animationFillMode(str) {
  return /* tuple */[
          "animation-fill-mode",
          str
        ];
}

function opacity(num) {
  return /* tuple */[
          "opacity",
          num.toString()
        ];
}

function animationName(str) {
  return /* tuple */[
          "animation-name",
          "$" + str
        ];
}

function nthChild(child, dict) {
  var child$1 = String(child);
  return /* tuple */[
          "&:nth-child(" + (String(child$1) + ")"),
          dict
        ];
}

function $$var(str, dict) {
  return /* tuple */[
          "&$" + str,
          dict
        ];
}

function rotate(str) {
  return "rotate(" + (String(str) + ")");
}

function translateY(str) {
  return "translateY(" + (String(str) + ")");
}

function translate(x, y) {
  return "translate(" + (String(x) + (", " + (String(y) + ")")));
}

function important(str) {
  return str + " !important";
}

function keyframes(name, frames) {
  var formatFrames = function (dict, param) {
    dict[String(param[0]) + "%"] = param[1];
    return dict;
  };
  var keyframe = List.fold_left(formatFrames, { }, frames);
  return /* tuple */[
          "@keyframes " + (String(name) + ""),
          keyframe
        ];
}

var style = Js_dict.fromList;

var create = Js_dict.fromList;

function getClassName(classes, key) {
  var className = Js_dict.get(classes, key);
  if (className !== undefined) {
    return className;
  } else {
    return "";
  }
}

function useStyles(muiUseStyles, props) {
  var partial_arg = props !== undefined ? Curry._1(muiUseStyles, Caml_option.valFromOption(props)) : Curry._1(muiUseStyles, "");
  return (function (param) {
      return getClassName(partial_arg, param);
    });
}

function makeGlobalStyles(styles) {
  var styleDict = { };
  styleDict["@global"] = styles;
  var partial_arg = Styles.makeStyles(styleDict);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

function makeStyles(styles) {
  var partial_arg = Styles.makeStyles(styles);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

function makeThemeStyles(styleFunc) {
  var partial_arg = Styles.makeStyles(styleFunc);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

var hidden = "hidden";

var flex = "flex";

var column = "column";

var flexEnd = "flexEnd";

var forwards = "forwards";

export {
  clsx ,
  toFloat ,
  toInt ,
  toStr ,
  vw ,
  vh ,
  px ,
  pct ,
  deg ,
  ms ,
  backgroundColor ,
  width ,
  height ,
  overflow ,
  display ,
  flexDirection ,
  alignItems ,
  padding ,
  transition ,
  transform ,
  zIndex ,
  margin ,
  animationDuration ,
  animationFillMode ,
  opacity ,
  animationName ,
  nthChild ,
  $$var ,
  hidden ,
  flex ,
  column ,
  flexEnd ,
  rotate ,
  translateY ,
  translate ,
  important ,
  forwards ,
  keyframes ,
  style ,
  create ,
  getClassName ,
  useStyles ,
  makeGlobalStyles ,
  makeStyles ,
  makeThemeStyles ,
  
}
/* @material-ui/styles Not a pure module */
