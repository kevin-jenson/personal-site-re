// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as CamlinternalOO from "bs-platform/lib/es6/camlinternalOO.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Styles from "@material-ui/styles";

function clsx(classNames) {
  return List.fold_left((function (classes, cls) {
                return "" + (String(classes) + (" " + (String(cls) + "")));
              }), "", classNames);
}

function toFloat(prim) {
  return prim;
}

function toInt(prim) {
  return prim | 0;
}

function toStr(prim) {
  return String(prim);
}

var css = Js_dict.fromList;

var create = Js_dict.fromList;

function getClassName(classes, key) {
  var className = Js_dict.get(classes, key);
  if (className !== undefined) {
    return className;
  } else {
    return "";
  }
}

function useStyles(muiUseStyles, props) {
  var partial_arg = props !== undefined ? Curry._1(muiUseStyles, Caml_option.valFromOption(props)) : Curry._1(muiUseStyles, "");
  return (function (param) {
      return getClassName(partial_arg, param);
    });
}

function makeGlobalStyles(styles) {
  var styleDict = { };
  styleDict["@global"] = styles;
  var partial_arg = Styles.makeStyles(styleDict);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

function makeStyles(styles) {
  var partial_arg = Styles.makeStyles(styles);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

function makeThemeStyles(styleFunc) {
  var partial_arg = Styles.makeStyles(styleFunc);
  return (function (param) {
      return useStyles(partial_arg, param);
    });
}

var auto = "auto";

var initial = "initial";

var inherit_ = "inherit";

var none = "none";

var unset = "unset";

function getLength(length) {
  switch (length.tag | 0) {
    case /* Cm */0 :
        return String(length[0]) + "cm";
    case /* Mm */1 :
        return String(length[0]) + "mm";
    case /* In */2 :
        return String(length[0]) + "in";
    case /* Px */3 :
        return String(length[0]) + "px";
    case /* Pt */4 :
        return String(length[0]) + "pt";
    case /* Pc */5 :
        return String(length[0]) + "pc";
    case /* Em */6 :
        return String(length[0]) + "em";
    case /* Ex */7 :
        return String(length[0]) + "ex";
    case /* Ch */8 :
        return String(length[0]) + "ch";
    case /* Rem */9 :
        return String(length[0]) + "rem";
    case /* Vw */10 :
        return String(length[0]) + "vw";
    case /* Vh */11 :
        return String(length[0]) + "vh";
    case /* Vmin */12 :
        return String(length[0]) + "vmin";
    case /* Vmax */13 :
        return String(length[0]) + "vmax";
    case /* Pct */14 :
        return String(length[0]) + "%";
    
  }
}

var Length = {
  getLength: getLength
};

function timing(opt) {
  if (typeof opt === "number") {
    switch (opt) {
      case /* Linear */0 :
          return "linear";
      case /* Ease */1 :
          return "ease";
      case /* EaseIn */2 :
          return "ease-in";
      case /* EaseOut */3 :
          return "ease-out";
      case /* EaseInOut */4 :
          return "ease-in-out";
      case /* StepStart */5 :
          return "step-start";
      case /* StepEnd */6 :
          return "step-end";
      case /* Initial */7 :
          return initial;
      case /* Inherit */8 :
          return inherit_;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Step */0 :
          return "steps(" + (String(opt[0]) + ")");
      case /* Steps */1 :
          var step = opt[1];
          var stepValue = typeof step === "number" ? (
              step !== 0 ? "end" : "start"
            ) : step[0];
          return "steps(" + (String(opt[0]) + (", " + (String(stepValue) + ")")));
      case /* CubicBezier */2 :
          return "cubic-bezier(" + (String(opt[0]) + (", " + (String(opt[1]) + (", " + (String(opt[2]) + (", " + (String(opt[3]) + ")")))))));
      case /* Unsafe_set */3 :
          return opt[0];
      
    }
  }
}

var TimingFunctions = {
  timing: timing
};

function alignContent(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Stretch */0 :
          tmp = "stretch";
          break;
      case /* Center */1 :
          tmp = "center";
          break;
      case /* FlexStart */2 :
          tmp = "flex-start";
          break;
      case /* FlexEnd */3 :
          tmp = "flex-end";
          break;
      case /* SpaceBetween */4 :
          tmp = "space-between";
          break;
      case /* SpaceAround */5 :
          tmp = "space-around";
          break;
      case /* Initial */6 :
          tmp = initial;
          break;
      case /* Inherit */7 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "align-content",
          tmp
        ];
}

function alignItems(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Stretch */0 :
          tmp = "stretch";
          break;
      case /* Center */1 :
          tmp = "center";
          break;
      case /* FlexStart */2 :
          tmp = "flex-start";
          break;
      case /* FlexEnd */3 :
          tmp = "flex-end";
          break;
      case /* Baseline */4 :
          tmp = "baseline";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "align-items",
          tmp
        ];
}

function alignSelf(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = "auto";
          break;
      case /* Stretch */1 :
          tmp = "stretch";
          break;
      case /* Center */2 :
          tmp = "center";
          break;
      case /* FlexStart */3 :
          tmp = "flex-start";
          break;
      case /* FlexEnd */4 :
          tmp = "flex-end";
          break;
      case /* Baseline */5 :
          tmp = "baseline";
          break;
      case /* Initial */6 :
          tmp = initial;
          break;
      case /* Inherit */7 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "align-self",
          tmp
        ];
}

var Align = {
  alignContent: alignContent,
  alignItems: alignItems,
  alignSelf: alignSelf
};

function all(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Initial */0 :
          tmp = initial;
          break;
      case /* Inherit */1 :
          tmp = inherit_;
          break;
      case /* Unset */2 :
          tmp = unset;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "all",
          tmp
        ];
}

var All = {
  all: all
};

var Not_valid = Caml_exceptions.create("MuiStyles.Animation.Not_valid");

function _animationTime(opt) {
  if (typeof opt === "number") {
    if (opt === /* Initial */0) {
      return initial;
    } else {
      return inherit_;
    }
  }
  if (opt.tag) {
    return opt[0];
  }
  var str = opt[0];
  if (str.includes("ms") || str.includes("s")) {
    return str;
  }
  throw [
        Not_valid,
        "Time(string) needs to be in seconds or miliseconds"
      ];
}

function animationDelay(opt) {
  return /* tuple */[
          "animation-delay",
          _animationTime(opt)
        ];
}

function animationDirection(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Reverse */1 :
          tmp = "reverse";
          break;
      case /* Alternate */2 :
          tmp = "alternate";
          break;
      case /* AlternateReverse */3 :
          tmp = "alternate-reverse";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "animation-direction",
          tmp
        ];
}

function animationDuration(opt) {
  return /* tuple */[
          "animation-duration",
          _animationTime(opt)
        ];
}

function animationFillMode(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = "none";
          break;
      case /* Forwards */1 :
          tmp = "forwards";
          break;
      case /* Backwards */2 :
          tmp = "backwards";
          break;
      case /* Both */3 :
          tmp = "both";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "animation-fill-mode",
          tmp
        ];
}

function animationIterationCount(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Infinite */0 :
          tmp = "infinite";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : String(opt[0]);
  }
  return /* tuple */[
          "animation-iteration-count",
          tmp
        ];
}

function animationName(opt) {
  return /* tuple */[
          "animation-name",
          typeof opt === "number" ? (
              opt !== 0 ? inherit_ : initial
            ) : opt[0]
        ];
}

function animationPlayState(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Paused */0 :
          tmp = "paused";
          break;
      case /* Running */1 :
          tmp = "running";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "animation-play-state",
          tmp
        ];
}

function animationTimingFunction(opt) {
  return /* tuple */[
          "animation-timing-function",
          timing(opt)
        ];
}

function animation(opt) {
  var tmp;
  switch (opt.tag | 0) {
    case /* Animation1 */0 :
        tmp = animationName(opt[0])[1];
        break;
    case /* Animation2 */1 :
        var match = animationName(opt[0]);
        var durationValue = _animationTime(opt[1]);
        tmp = "" + (String(match[1]) + (" " + (String(durationValue) + "")));
        break;
    case /* Animation3 */2 :
        var match$1 = animationName(opt[0]);
        var durationValue$1 = _animationTime(opt[1]);
        var timingValue = timing(opt[2]);
        tmp = "" + (String(match$1[1]) + (" " + (String(durationValue$1) + (" " + (String(timingValue) + "")))));
        break;
    case /* Animation4 */3 :
        var match$2 = animationName(opt[0]);
        var durationValue$2 = _animationTime(opt[1]);
        var timingValue$1 = timing(opt[2]);
        var delayValue = _animationTime(opt[3]);
        tmp = "" + (String(match$2[1]) + (" " + (String(durationValue$2) + (" " + (String(timingValue$1) + (" " + (String(delayValue) + "")))))));
        break;
    case /* Animation5 */4 :
        var match$3 = animationName(opt[0]);
        var durationValue$3 = _animationTime(opt[1]);
        var timingValue$2 = timing(opt[2]);
        var delayValue$1 = _animationTime(opt[3]);
        var match$4 = animationIterationCount(opt[4]);
        tmp = "" + (String(match$3[1]) + (" " + (String(durationValue$3) + (" " + (String(timingValue$2) + (" " + (String(delayValue$1) + (" " + (String(match$4[1]) + "")))))))));
        break;
    case /* Animation6 */5 :
        var match$5 = animationName(opt[0]);
        var durationValue$4 = _animationTime(opt[1]);
        var timingValue$3 = timing(opt[2]);
        var delayValue$2 = _animationTime(opt[3]);
        var match$6 = animationDirection(opt[5]);
        var match$7 = animationIterationCount(opt[4]);
        tmp = "" + (String(match$5[1]) + (" " + (String(durationValue$4) + (" " + (String(timingValue$3) + (" " + (String(delayValue$2) + (" " + (String(match$7[1]) + (" " + (String(match$6[1]) + "")))))))))));
        break;
    case /* Animation7 */6 :
        var match$8 = animationName(opt[0]);
        var durationValue$5 = _animationTime(opt[1]);
        var timingValue$4 = timing(opt[2]);
        var delayValue$3 = _animationTime(opt[3]);
        var match$9 = animationIterationCount(opt[4]);
        var match$10 = animationDirection(opt[5]);
        var match$11 = animationFillMode(opt[6]);
        tmp = "" + (String(match$8[1]) + (" " + (String(durationValue$5) + (" " + (String(timingValue$4) + (" " + (String(delayValue$3) + (" " + (String(match$9[1]) + (" " + (String(match$10[1]) + (" " + (String(match$11[1]) + "")))))))))))));
        break;
    case /* Animation8 */7 :
        var match$12 = animationName(opt[0]);
        var durationValue$6 = _animationTime(opt[1]);
        var timingValue$5 = timing(opt[2]);
        var delayValue$4 = _animationTime(opt[3]);
        var match$13 = animationIterationCount(opt[4]);
        var match$14 = animationDirection(opt[5]);
        var match$15 = animationFillMode(opt[6]);
        var match$16 = animationPlayState(opt[7]);
        tmp = "" + (String(match$12[1]) + (" " + (String(durationValue$6) + (" " + (String(timingValue$5) + (" " + (String(delayValue$4) + (" " + (String(match$13[1]) + (" " + (String(match$14[1]) + (" " + (String(match$15[1]) + (" " + (String(match$16[1]) + "")))))))))))))));
        break;
    case /* Unsafe_set */8 :
        tmp = opt[0];
        break;
    
  }
  return /* tuple */[
          "animation",
          tmp
        ];
}

var Animation = {
  Not_valid: Not_valid,
  _animationTime: _animationTime,
  animationDelay: animationDelay,
  animationDirection: animationDirection,
  animationDuration: animationDuration,
  animationFillMode: animationFillMode,
  animationIterationCount: animationIterationCount,
  animationName: animationName,
  animationPlayState: animationPlayState,
  animationTimingFunction: animationTimingFunction,
  animation: animation
};

function backfaceVisibilty(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Visible */0 :
          tmp = "visible";
          break;
      case /* Hidden */1 :
          tmp = "hidden";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "backface-visibility",
          tmp
        ];
}

var Backface = {
  backfaceVisibilty: backfaceVisibilty
};

function backgroundAttachment(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Scroll */0 :
          tmp = "scroll";
          break;
      case /* Fixed */1 :
          tmp = "fixed";
          break;
      case /* Local */2 :
          tmp = "local";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "background-attachment",
          tmp
        ];
}

function backgroundBlendMode(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Multiply */1 :
          tmp = "multiply";
          break;
      case /* Screen */2 :
          tmp = "screen";
          break;
      case /* Overlay */3 :
          tmp = "overlay";
          break;
      case /* Darken */4 :
          tmp = "darken";
          break;
      case /* Lighten */5 :
          tmp = "lighten";
          break;
      case /* ColorDodge */6 :
          tmp = "color-dodge";
          break;
      case /* Saturation */7 :
          tmp = "saturation";
          break;
      case /* Color */8 :
          tmp = "color";
          break;
      case /* Luminosity */9 :
          tmp = "luminosity";
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "background-blend-mode",
          tmp
        ];
}

function _backgroundBoxing(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* BorderBox */0 :
        return "border-box";
    case /* PaddingBox */1 :
        return "padding-box";
    case /* ContentBox */2 :
        return "content-box";
    case /* Initial */3 :
        return initial;
    case /* Inherit */4 :
        return inherit_;
    
  }
}

function backgroundClip(opt) {
  return /* tuple */[
          "background-clip",
          _backgroundBoxing(opt)
        ];
}

function backgroundColor(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Transparent */0 :
          tmp = "transparent";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "background-color",
          tmp
        ];
}

function backgroundImage(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* URL */0 :
          tmp = "url(" + (String(opt[0]) + ")");
          break;
      case /* LinearGradient */1 :
          tmp = "linear-gradient(" + (String(opt[0]) + ")");
          break;
      case /* RadialGradient */2 :
          tmp = "radial-gradient(" + (String(opt[0]) + ")");
          break;
      case /* RepeatingLinearGradient */3 :
          tmp = "repeating-linear-gradient(" + (String(opt[0]) + ")");
          break;
      case /* RepeatingRadialGradient */4 :
          tmp = "repeating-radial-gradient(" + (String(opt[0]) + ")");
          break;
      case /* Unsafe_set */5 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "background-image",
          tmp
        ];
}

function backgroundOrigin(opt) {
  return /* tuple */[
          "background-origin",
          _backgroundBoxing(opt)
        ];
}

function backgroundPosition(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else {
    switch (opt.tag | 0) {
      case /* Position */0 :
          var pos2 = opt[1];
          switch (opt[0]) {
            case /* Center */1 :
                switch (pos2) {
                  case /* Bottom */0 :
                      tmp = "center bottom";
                      break;
                  case /* Center */1 :
                  case /* Left */2 :
                  case /* Right */3 :
                      tmp = "center center";
                      break;
                  case /* Top */4 :
                      tmp = "center top";
                      break;
                  
                }
                break;
            case /* Left */2 :
                switch (pos2) {
                  case /* Bottom */0 :
                      tmp = "left bottom";
                      break;
                  case /* Center */1 :
                      tmp = "left enter";
                      break;
                  case /* Left */2 :
                  case /* Right */3 :
                      tmp = "center center";
                      break;
                  case /* Top */4 :
                      tmp = "left top";
                      break;
                  
                }
                break;
            case /* Right */3 :
                switch (pos2) {
                  case /* Bottom */0 :
                      tmp = "right bottom";
                      break;
                  case /* Center */1 :
                      tmp = "right center";
                      break;
                  case /* Left */2 :
                  case /* Right */3 :
                      tmp = "center center";
                      break;
                  case /* Top */4 :
                      tmp = "right top";
                      break;
                  
                }
                break;
            case /* Bottom */0 :
            case /* Top */4 :
                tmp = "center center";
                break;
            
          }
          break;
      case /* PositionExact */1 :
          var x = getLength(opt[0]);
          var y = getLength(opt[1]);
          tmp = "" + (String(x) + (" " + (String(y) + "")));
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "background-position",
          tmp
        ];
}

function backgroundRepeat(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Repeat */0 :
          tmp = "repeat";
          break;
      case /* RepeatX */1 :
          tmp = "repeat-x";
          break;
      case /* RepeatY */2 :
          tmp = "repeat-y";
          break;
      case /* NoRepeat */3 :
          tmp = "no-repeat";
          break;
      case /* Space */4 :
          tmp = "space";
          break;
      case /* Round */5 :
          tmp = "round";
          break;
      case /* Initial */6 :
          tmp = initial;
          break;
      case /* Inherit */7 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "background-repeat",
          tmp
        ];
}

function backgroundSize(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Cover */1 :
          tmp = "cover";
          break;
      case /* Contain */2 :
          tmp = "contain";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Length */0 :
          var x = getLength(opt[0]);
          var y = getLength(opt[1]);
          tmp = "" + (String(x) + (" " + (String(y) + "")));
          break;
      case /* LengthX */1 :
          var x$1 = getLength(opt[0]);
          tmp = "" + (String(x$1) + "");
          break;
      case /* LengthY */2 :
          var y$1 = getLength(opt[0]);
          tmp = "auto " + (String(y$1) + "");
          break;
      case /* Unsafe_set */3 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "background-size",
          tmp
        ];
}

function background(opt) {
  return /* tuple */[
          "background",
          opt[0]
        ];
}

var Background = {
  backgroundAttachment: backgroundAttachment,
  backgroundBlendMode: backgroundBlendMode,
  _backgroundBoxing: _backgroundBoxing,
  backgroundClip: backgroundClip,
  backgroundColor: backgroundColor,
  backgroundImage: backgroundImage,
  backgroundOrigin: backgroundOrigin,
  backgroundPosition: backgroundPosition,
  backgroundRepeat: backgroundRepeat,
  backgroundSize: backgroundSize,
  background: background
};

function getBorderWidth(opt) {
  if (typeof opt !== "number") {
    if (opt.tag) {
      return opt[0];
    } else {
      return getLength(opt[0]);
    }
  }
  switch (opt) {
    case /* Medium */0 :
        return "medium";
    case /* Thin */1 :
        return "thin";
    case /* Thick */2 :
        return "thick";
    case /* Initial */3 :
        return initial;
    case /* Inherit */4 :
        return inherit_;
    
  }
}

function getBorderStyle(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* None */0 :
        return none;
    case /* Hidden */1 :
        return "hidden";
    case /* Dotted */2 :
        return "dotted";
    case /* Dashed */3 :
        return "dashed";
    case /* Solid */4 :
        return "solid";
    case /* Double */5 :
        return "double";
    case /* Groove */6 :
        return "groove";
    case /* Ridge */7 :
        return "ridge";
    case /* Inset */8 :
        return "inset";
    case /* Outset */9 :
        return "outset";
    case /* Initial */10 :
        return initial;
    case /* Inherit */11 :
        return inherit_;
    
  }
}

function getBorderColor(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* Transparent */0 :
        return "transparent";
    case /* Initial */1 :
        return initial;
    case /* Inherit */2 :
        return inherit_;
    
  }
}

function getBorder(widthOpt, styleOpt, colorOpt, param) {
  var width = widthOpt !== undefined ? widthOpt : /* Unsafe_set */Block.__(1, [""]);
  var style = styleOpt !== undefined ? styleOpt : /* Unsafe_set */[""];
  var color = colorOpt !== undefined ? colorOpt : /* Unsafe_set */Block.__(1, [""]);
  var width$1 = getBorderWidth(width);
  var style$1 = getBorderStyle(style);
  var color$1 = getBorderColor(color);
  return $$String.trim("" + (String(width$1) + (" " + (String(style$1) + (" " + (String(color$1) + ""))))));
}

function borderBottomWidth(opt) {
  return /* tuple */[
          "border-bottom-width",
          getBorderWidth(opt)
        ];
}

function borderBottomeStyle(opt) {
  return /* tuple */[
          "border-bottom-style",
          getBorderStyle(opt)
        ];
}

function borderBottomColor(opt) {
  return /* tuple */[
          "border-bottom-color",
          getBorderColor(opt)
        ];
}

function borderBottom(width, style, color, param) {
  return /* tuple */[
          "border-bottom",
          getBorder(width, style, color, undefined)
        ];
}

function getBorderRadius(radius) {
  if (typeof radius === "number") {
    if (radius === /* Initial */0) {
      return initial;
    } else {
      return inherit_;
    }
  } else if (radius.tag) {
    return radius[0];
  } else {
    return getLength(radius[0]);
  }
}

function borderBottomLeftRadius(opt) {
  return /* tuple */[
          "border-bottom-left-radius",
          getBorderRadius(opt)
        ];
}

function borderBottomRightRadius(opt) {
  return /* tuple */[
          "border-bottom-right-radius",
          getBorderRadius(opt)
        ];
}

function borderCollapse(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Separate */0 :
          tmp = "separate";
          break;
      case /* Collapse */1 :
          tmp = "collapse";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "border-collapse",
          tmp
        ];
}

function borderColor(opt) {
  return /* tuple */[
          "border-color",
          getBorderColor(opt)
        ];
}

function borderImageSource(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = "none";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "border-image-source",
          tmp
        ];
}

function borderImageSlice(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Fill */0 :
          tmp = "fill";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Number */0 :
          tmp = "" + (String(opt[0]) + (" " + (String(opt[1]) + "")));
          break;
      case /* Pct */1 :
          tmp = "" + (String(opt[0]) + ("% " + (String(opt[1]) + "%")));
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "border-image-slice",
          tmp
        ];
}

function borderImageWidth(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Length */0 :
          tmp = getLength(opt[0]);
          break;
      case /* Number */1 :
          tmp = String(opt[0]);
          break;
      case /* Pct */2 :
          tmp = String(opt[0]) + "%";
          break;
      case /* Unsafe_set */3 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "border-image-width",
          tmp
        ];
}

function borderImageOutset(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else {
    switch (opt.tag | 0) {
      case /* Length */0 :
          tmp = getLength(opt[0]);
          break;
      case /* Number */1 :
          tmp = String(opt[0]);
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "border-image-outset",
          tmp
        ];
}

function borderImageRepeat(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Stretch */0 :
          tmp = "stretch";
          break;
      case /* Repeat */1 :
          tmp = "repeat";
          break;
      case /* Round */2 :
          tmp = "round";
          break;
      case /* Space */3 :
          tmp = "space";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "border-image-repeat",
          tmp
        ];
}

function borderImage(sourceOpt, sliceOpt, widthOpt, outsetOpt, repeatOpt, param) {
  var source = sourceOpt !== undefined ? sourceOpt : /* Unsafe_set */Block.__(1, [""]);
  var slice = sliceOpt !== undefined ? sliceOpt : /* Unsafe_set */Block.__(2, [""]);
  var width = widthOpt !== undefined ? widthOpt : /* Unsafe_set */Block.__(3, [""]);
  var outset = outsetOpt !== undefined ? outsetOpt : /* Unsafe_set */Block.__(2, [""]);
  var repeat = repeatOpt !== undefined ? repeatOpt : /* Unsafe_set */[""];
  var match = borderImageSource(source);
  var match$1 = borderImageSlice(slice);
  var match$2 = borderImageWidth(width);
  var match$3 = borderImageOutset(outset);
  var match$4 = borderImageRepeat(repeat);
  return /* tuple */[
          "border-image",
          $$String.trim("" + (String(match[1]) + (" " + (String(match$1[1]) + (" " + (String(match$2[1]) + (" " + (String(match$3[1]) + (" " + (String(match$4[1]) + ""))))))))))
        ];
}

function borderLeft(width, style, color, param) {
  return /* tuple */[
          "border-left",
          getBorder(width, style, color, undefined)
        ];
}

function borderLeftColor(opt) {
  return /* tuple */[
          "border-left-color",
          getBorderColor(opt)
        ];
}

function borderLeftStyle(opt) {
  return /* tuple */[
          "border-left-style",
          getBorderStyle(opt)
        ];
}

function borderLeftWidth(opt) {
  return /* tuple */[
          "border-left-width",
          getBorderWidth(opt)
        ];
}

function borderRadius(optList) {
  var radius = $$Array.of_list(List.map(getBorderRadius, optList)).join(" ");
  return /* tuple */[
          "border-radius",
          radius
        ];
}

function borderRight(width, style, color, param) {
  return /* tuple */[
          "border-right",
          getBorder(width, style, color, undefined)
        ];
}

function borderRightColor(opt) {
  return /* tuple */[
          "border-right-color",
          getBorderColor(opt)
        ];
}

function borderRightStyle(opt) {
  return /* tuple */[
          "border-right-style",
          getBorderStyle(opt)
        ];
}

function borderRightWidth(opt) {
  return /* tuple */[
          "border-right-width",
          getBorderWidth(opt)
        ];
}

function borderSpacing(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : $$Array.of_list(List.map(getLength, opt[0])).join(" ")
    );
  return /* tuple */[
          "border-spacing",
          tmp
        ];
}

function borderStyle(opt) {
  return /* tuple */[
          "border-style",
          getBorderStyle(opt)
        ];
}

function borderTop(width, style, color, param) {
  return /* tuple */[
          "border-top",
          getBorder(width, style, color, undefined)
        ];
}

function borderTopColor(opt) {
  return /* tuple */[
          "border-top-color",
          getBorderColor(opt)
        ];
}

function borderTopLeftRadius(opt) {
  return /* tuple */[
          "border-top-left-radius",
          getBorderRadius(opt)
        ];
}

function borderTopRightRadius(opt) {
  return /* tuple */[
          "border-top-right-radius",
          getBorderRadius(opt)
        ];
}

function borderTopStyle(opt) {
  return /* tuple */[
          "border-top-style",
          getBorderStyle(opt)
        ];
}

function borderTopWidth(opt) {
  return /* tuple */[
          "border-top-width",
          getBorderWidth(opt)
        ];
}

function borderWidth(opt) {
  return /* tuple */[
          "border-width",
          getBorderWidth(opt)
        ];
}

function border(width, style, color, param) {
  return /* tuple */[
          "border",
          getBorder(width, style, color, undefined)
        ];
}

var Border = {
  getBorderWidth: getBorderWidth,
  getBorderStyle: getBorderStyle,
  getBorderColor: getBorderColor,
  getBorder: getBorder,
  borderBottomWidth: borderBottomWidth,
  borderBottomeStyle: borderBottomeStyle,
  borderBottomColor: borderBottomColor,
  borderBottom: borderBottom,
  getBorderRadius: getBorderRadius,
  borderBottomLeftRadius: borderBottomLeftRadius,
  borderBottomRightRadius: borderBottomRightRadius,
  borderCollapse: borderCollapse,
  borderColor: borderColor,
  borderImageSource: borderImageSource,
  borderImageSlice: borderImageSlice,
  borderImageWidth: borderImageWidth,
  borderImageOutset: borderImageOutset,
  borderImageRepeat: borderImageRepeat,
  borderImage: borderImage,
  borderLeft: borderLeft,
  borderLeftColor: borderLeftColor,
  borderLeftStyle: borderLeftStyle,
  borderLeftWidth: borderLeftWidth,
  borderRadius: borderRadius,
  borderRight: borderRight,
  borderRightColor: borderRightColor,
  borderRightStyle: borderRightStyle,
  borderRightWidth: borderRightWidth,
  borderSpacing: borderSpacing,
  borderStyle: borderStyle,
  borderTop: borderTop,
  borderTopColor: borderTopColor,
  borderTopLeftRadius: borderTopLeftRadius,
  borderTopRightRadius: borderTopRightRadius,
  borderTopStyle: borderTopStyle,
  borderTopWidth: borderTopWidth,
  borderWidth: borderWidth,
  border: border
};

function bottom(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Length */0 :
          tmp = getLength(opt[0]);
          break;
      case /* Pct */1 :
          tmp = String(opt[0]) + "%";
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "bottom",
          tmp
        ];
}

var Bottom = {
  bottom: bottom
};

function boxDecorationBreak(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Slice */0 :
          tmp = "slice";
          break;
      case /* Clone */1 :
          tmp = "clone";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "box-decoration-break",
          tmp
        ];
}

function boxShadow(shadowList) {
  return /* tuple */[
          "box-shadow",
          $$Array.of_list(shadowList).join(" ")
        ];
}

function boxSizing(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* ContentBox */0 :
          tmp = "content-box";
          break;
      case /* BorderBox */1 :
          tmp = "border-box";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "box-sizing",
          tmp
        ];
}

var Box = {
  boxDecorationBreak: boxDecorationBreak,
  boxShadow: boxShadow,
  boxSizing: boxSizing
};

function getBreak(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* Auto */0 :
        return auto;
    case /* All */1 :
        return "all";
    case /* Always */2 :
        return "always";
    case /* Avoid */3 :
        return "avoid";
    case /* AvoidColumn */4 :
        return "avoid-column";
    case /* AvoidPage */5 :
        return "avoid-page";
    case /* AvoidRegion */6 :
        return "avoid-region";
    case /* Column */7 :
        return "column";
    case /* Left */8 :
        return "left";
    case /* Page */9 :
        return "page";
    case /* Recto */10 :
        return "recto";
    case /* Region */11 :
        return "region";
    case /* Right */12 :
        return "right";
    case /* Verso */13 :
        return "verso";
    case /* Initial */14 :
        return initial;
    case /* Inherit */15 :
        return inherit_;
    
  }
}

function breakAfter(opt) {
  return /* tuple */[
          "break-after",
          getBreak(opt)
        ];
}

function breakBefore(opt) {
  return /* tuple */[
          "break-before",
          getBreak(opt)
        ];
}

function breakInside(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Avoid */1 :
          tmp = "avoid";
          break;
      case /* AvoidColumn */2 :
          tmp = "avoid-column";
          break;
      case /* AvoidPage */3 :
          tmp = "avoid-page";
          break;
      case /* AvoidRegion */4 :
          tmp = "avoid-region";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "break-inside",
          tmp
        ];
}

var Break = {
  getBreak: getBreak,
  breakAfter: breakAfter,
  breakBefore: breakBefore,
  breakInside: breakInside
};

function captionSide(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Top */0 :
          tmp = "top";
          break;
      case /* Bottom */1 :
          tmp = "bottom";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "caption-side",
          tmp
        ];
}

var Caption = {
  captionSide: captionSide
};

function caretColor(opt) {
  return /* tuple */[
          "caret-color",
          typeof opt === "number" ? "auto" : opt[0]
        ];
}

var Caret = {
  caretColor: caretColor
};

function charset(set) {
  return /* tuple */[
          "@charset",
          set
        ];
}

function clear(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Left */1 :
          tmp = "left";
          break;
      case /* Right */2 :
          tmp = "right";
          break;
      case /* Both */3 :
          tmp = "both";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "clear",
          tmp
        ];
}

var Clear = {
  clear: clear
};

function clipPath(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* MarginBox */0 :
          tmp = "margin-box";
          break;
      case /* BorderBox */1 :
          tmp = "border-box";
          break;
      case /* PaddingBox */2 :
          tmp = "padding-box";
          break;
      case /* ContentBox */3 :
          tmp = "content-box";
          break;
      case /* FillBox */4 :
          tmp = "fill-box";
          break;
      case /* StrokeBox */5 :
          tmp = "stroke-box";
          break;
      case /* ViewBox */6 :
          tmp = "view-box";
          break;
      case /* None */7 :
          tmp = none;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "clip-path",
          tmp
        ];
}

var Clip = {
  clipPath: clipPath
};

function color(opt) {
  return /* tuple */[
          "color",
          typeof opt === "number" ? (
              opt !== 0 ? inherit_ : initial
            ) : opt[0]
        ];
}

var Color = {
  color: color
};

function columnCount(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : String(opt[0]);
  }
  return /* tuple */[
          "column-count",
          tmp
        ];
}

function columnFill(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Balance */0 :
          tmp = "balance";
          break;
      case /* Auto */1 :
          tmp = auto;
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "column-fill",
          tmp
        ];
}

function columnGap(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "column-gap",
          tmp
        ];
}

function columnRuleColor(opt) {
  return /* tuple */[
          "column-rule-color",
          typeof opt === "number" ? (
              opt !== 0 ? inherit_ : initial
            ) : opt[0]
        ];
}

function columnRuleStyle(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Hidden */1 :
          tmp = "hidden";
          break;
      case /* Dotted */2 :
          tmp = "dotted";
          break;
      case /* Dashed */3 :
          tmp = "dashed";
          break;
      case /* Solid */4 :
          tmp = "solid";
          break;
      case /* Double */5 :
          tmp = "double";
          break;
      case /* Groove */6 :
          tmp = "groove";
          break;
      case /* Ridge */7 :
          tmp = "ridge";
          break;
      case /* Inset */8 :
          tmp = "inset";
          break;
      case /* Outset */9 :
          tmp = "outset";
          break;
      case /* Initial */10 :
          tmp = initial;
          break;
      case /* Inherit */11 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "column-rule-style",
          tmp
        ];
}

function columnRuleWidth(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Medium */0 :
          tmp = "medium";
          break;
      case /* Thin */1 :
          tmp = "thin";
          break;
      case /* Thick */2 :
          tmp = "thick";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "column-rule-width",
          tmp
        ];
}

function columnRule(color, style, width, param) {
  var match = columnRuleColor(Belt_Option.getWithDefault(color, /* Unsafe_set */Block.__(1, [""])));
  var match$1 = columnRuleStyle(Belt_Option.getWithDefault(style, /* Unsafe_set */[""]));
  var match$2 = columnRuleWidth(Belt_Option.getWithDefault(width, /* Unsafe_set */Block.__(1, [""])));
  return "" + (String(match$2[1]) + (" " + (String(match$1[1]) + (" " + (String(match[1]) + "")))));
}

function columnSpan(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* All */1 :
          tmp = "all";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "column-span",
          tmp
        ];
}

function columnWidth(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "column-width",
          tmp
        ];
}

function columns(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else if (opt.tag) {
    tmp = opt[0];
  } else {
    var match = columnWidth(opt[0]);
    var match$1 = columnCount(opt[1]);
    tmp = "" + (String(match[1]) + (" " + (String(match$1[1]) + "")));
  }
  return /* tuple */[
          "columns",
          tmp
        ];
}

var Column = {
  columnCount: columnCount,
  columnFill: columnFill,
  columnGap: columnGap,
  columnRuleColor: columnRuleColor,
  columnRuleStyle: columnRuleStyle,
  columnRuleWidth: columnRuleWidth,
  columnRule: columnRule,
  columnSpan: columnSpan,
  columnWidth: columnWidth,
  columns: columns
};

function content(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* None */1 :
          tmp = none;
          break;
      case /* Counter */2 :
          tmp = "counter";
          break;
      case /* OpenQuote */3 :
          tmp = "open-quote";
          break;
      case /* CloseQuote */4 :
          tmp = "close-quote";
          break;
      case /* NoOpenQuote */5 :
          tmp = "no-open-quote";
          break;
      case /* Initial */6 :
          tmp = initial;
          break;
      case /* Inherit */7 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Attr */0 :
          tmp = "attr(" + (String(opt[0]) + ")");
          break;
      case /* Url */2 :
          tmp = "url(" + (String(opt[0]) + ")");
          break;
      case /* String */1 :
      case /* Unsafe_set */3 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "content",
          tmp
        ];
}

var Content = {
  content: content
};

function getCounterValue(opt) {
  if (typeof opt !== "number") {
    if (opt.tag) {
      return opt[0];
    } else {
      return String(opt[0]);
    }
  }
  switch (opt) {
    case /* None */0 :
        return none;
    case /* Initial */1 :
        return initial;
    case /* Inherit */2 :
        return inherit_;
    
  }
}

function counterIncrement(opt) {
  return /* tuple */[
          "counter-increment",
          getCounterValue(opt)
        ];
}

function counterReset(opt) {
  return /* tuple */[
          "counter-reset",
          getCounterValue(opt)
        ];
}

var Counter = {
  getCounterValue: getCounterValue,
  counterIncrement: counterIncrement,
  counterReset: counterReset
};

function cursor(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Alias */0 :
          tmp = "alias";
          break;
      case /* AllScroll */1 :
          tmp = "all-scroll";
          break;
      case /* Auto */2 :
          tmp = auto;
          break;
      case /* Cell */3 :
          tmp = "cell";
          break;
      case /* ContextMenu */4 :
          tmp = "context-menu";
          break;
      case /* ColResize */5 :
          tmp = "col-resize";
          break;
      case /* Copy */6 :
          tmp = "copy";
          break;
      case /* Crosshair */7 :
          tmp = "crosshair";
          break;
      case /* Default */8 :
          tmp = "default";
          break;
      case /* EResize */9 :
          tmp = "e-resize";
          break;
      case /* EwResize */10 :
          tmp = "ew-resize";
          break;
      case /* Grab */11 :
          tmp = "grab";
          break;
      case /* Grabbing */12 :
          tmp = "grabbing";
          break;
      case /* Help */13 :
          tmp = "help";
          break;
      case /* Move */14 :
          tmp = "move";
          break;
      case /* NResize */15 :
          tmp = "n-resize";
          break;
      case /* NeResize */16 :
          tmp = "ne-resize";
          break;
      case /* NeswResize */17 :
          tmp = "nesw-resize";
          break;
      case /* NsResize */18 :
          tmp = "ns-resize";
          break;
      case /* NwResize */19 :
          tmp = "nw-resize";
          break;
      case /* NwseResize */20 :
          tmp = "nwse-resize";
          break;
      case /* NoDrop */21 :
          tmp = "no-drop";
          break;
      case /* None */22 :
          tmp = none;
          break;
      case /* NotAllowed */23 :
          tmp = "not-allowed";
          break;
      case /* Pointer */24 :
          tmp = "pointer";
          break;
      case /* Progress */25 :
          tmp = "progress";
          break;
      case /* RowRezise */26 :
          tmp = "row-resize";
          break;
      case /* SResize */27 :
          tmp = "s-resize";
          break;
      case /* SeResize */28 :
          tmp = "se=resize";
          break;
      case /* SwResize */29 :
          tmp = "sw-resize";
          break;
      case /* Text */30 :
          tmp = "text";
          break;
      case /* VerticalText */31 :
          tmp = "vertical-text";
          break;
      case /* WResize */32 :
          tmp = "w-resize";
          break;
      case /* Wait */33 :
          tmp = "wait";
          break;
      case /* ZoomIn */34 :
          tmp = "zoom-in";
          break;
      case /* ZoomOut */35 :
          tmp = "zoom-out";
          break;
      case /* Initial */36 :
          tmp = initial;
          break;
      case /* Inherit */37 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "cursor",
          tmp
        ];
}

var Cursor = {
  cursor: cursor
};

function direction(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Ltr */0 :
          tmp = "ltr";
          break;
      case /* Rtl */1 :
          tmp = "rtl";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "direction",
          tmp
        ];
}

var Direction = {
  direction: direction
};

function display(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Inline */0 :
          tmp = "inline";
          break;
      case /* Block */1 :
          tmp = "block";
          break;
      case /* Contents */2 :
          tmp = "contents";
          break;
      case /* Flex */3 :
          tmp = "flex";
          break;
      case /* Grid */4 :
          tmp = "grid";
          break;
      case /* InlineBlock */5 :
          tmp = "inline-block";
          break;
      case /* InlineFlex */6 :
          tmp = "inline-flex";
          break;
      case /* InlineGrid */7 :
          tmp = "inline-grid";
          break;
      case /* InlineTable */8 :
          tmp = "inline-table";
          break;
      case /* ListItem */9 :
          tmp = "list-item";
          break;
      case /* RunIn */10 :
          tmp = "run-in";
          break;
      case /* Table */11 :
          tmp = "table";
          break;
      case /* TableCaption */12 :
          tmp = "table-caption";
          break;
      case /* TableColumnGroup */13 :
          tmp = "table-column-group";
          break;
      case /* TableHeaderGroup */14 :
          tmp = "table-header-group";
          break;
      case /* TableFooterGroup */15 :
          tmp = "table-footer-group";
          break;
      case /* TableRowGroup */16 :
          tmp = "table-row-group";
          break;
      case /* TableCell */17 :
          tmp = "table-cell";
          break;
      case /* TableColumn */18 :
          tmp = "table-column";
          break;
      case /* TableRow */19 :
          tmp = "table-row";
          break;
      case /* None */20 :
          tmp = none;
          break;
      case /* Initial */21 :
          tmp = initial;
          break;
      case /* Inherit */22 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "display",
          tmp
        ];
}

var Display = {
  display: display
};

function emptyCells(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Show */0 :
          tmp = "show";
          break;
      case /* Hide */1 :
          tmp = "hide";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "empty-cells",
          tmp
        ];
}

var EmptyCells = {
  emptyCells: emptyCells
};

function filter(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Blur */0 :
          tmp = "blur(" + (String(opt[0]) + "px)");
          break;
      case /* Brightness */1 :
          tmp = "brightness(" + (String(opt[0]) + "%)");
          break;
      case /* Contrast */2 :
          tmp = "contrast(" + (String(opt[0]) + "%)");
          break;
      case /* DropShadow */3 :
          tmp = $$Array.of_list(opt[0]).join(" ");
          break;
      case /* Grayscale */4 :
          tmp = "grayscale(" + (String(opt[0]) + "%)");
          break;
      case /* HueRotate */5 :
          tmp = "hue-rotate(" + (String(opt[0]) + "deg)");
          break;
      case /* Invert */6 :
          tmp = "invert(" + (String(opt[0]) + "%)");
          break;
      case /* Opacity */7 :
          tmp = "opacity(" + (String(opt[0]) + "%)");
          break;
      case /* Saturate */8 :
          tmp = "saturate(" + (String(opt[0]) + "%)");
          break;
      case /* Sepia */9 :
          tmp = "sepia(" + (String(opt[0]) + "%)");
          break;
      case /* Url */10 :
          tmp = "url(" + (String(opt[0]) + ")");
          break;
      case /* Unsafe_set */11 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "filter",
          tmp
        ];
}

var Filter = {
  filter: filter
};

function flexBasis(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "flex-basis",
          tmp
        ];
}

function flexDirection(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Row */0 :
          tmp = "row";
          break;
      case /* RowReverse */1 :
          tmp = "row-reverse";
          break;
      case /* Column */2 :
          tmp = "column";
          break;
      case /* ColumnReverse */3 :
          tmp = "column-reverse";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "flex-direction",
          tmp
        ];
}

function flexGrow(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : String(opt[0])
    );
  return /* tuple */[
          "flex-grow",
          tmp
        ];
}

function flexShrink(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : String(opt[0])
    );
  return /* tuple */[
          "flex-shrink",
          tmp
        ];
}

function flex(grow, shrink, basis, param) {
  var match = flexGrow(Belt_Option.getWithDefault(grow, /* Unsafe_set */Block.__(1, [""])));
  var match$1 = flexShrink(Belt_Option.getWithDefault(shrink, /* Unsafe_set */Block.__(1, [""])));
  var match$2 = flexBasis(Belt_Option.getWithDefault(basis, /* Unsafe_set */Block.__(1, [""])));
  return $$String.trim("" + (String(match[1]) + (" " + (String(match$1[1]) + (" " + (String(match$2[1]) + ""))))));
}

function flexWrap(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* NoWrap */0 :
          tmp = "no-wrap";
          break;
      case /* Wrap */1 :
          tmp = "wrap";
          break;
      case /* WrapReverse */2 :
          tmp = "wrap-reverse";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "flex-wrap",
          tmp
        ];
}

function flexFlow(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else if (opt.tag) {
    tmp = opt[0];
  } else {
    var match = flexDirection(opt[0]);
    var match$1 = flexWrap(opt[1]);
    tmp = "" + (String(match[1]) + (" " + (String(match$1[1]) + "")));
  }
  return /* tuple */[
          "flex-flow",
          tmp
        ];
}

var Flex = {
  flexBasis: flexBasis,
  flexDirection: flexDirection,
  flexGrow: flexGrow,
  flexShrink: flexShrink,
  flex: flex,
  flexWrap: flexWrap,
  flexFlow: flexFlow
};

function $$float(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Left */1 :
          tmp = "left";
          break;
      case /* Right */2 :
          tmp = "right";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "float",
          tmp
        ];
}

var Float = {
  $$float: $$float
};

function fontFamily(opt) {
  return /* tuple */[
          "font-family",
          typeof opt === "number" ? (
              opt !== 0 ? inherit_ : initial
            ) : opt[0]
        ];
}

function fontFeatureSettings(opt) {
  var tmp;
  tmp = typeof opt === "number" ? "normal" : (
      opt.tag ? opt[0] : $$Array.of_list(opt[0]).join(" ")
    );
  return /* tuple */[
          "font-feature-settings",
          tmp
        ];
}

function fontKerning(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Normal */1 :
          tmp = "normal";
          break;
      case /* None */2 :
          tmp = none;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "font-kerning",
          tmp
        ];
}

function fontSize(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Medium */0 :
          tmp = "medium";
          break;
      case /* XxSmall */1 :
          tmp = "xx-small";
          break;
      case /* XSmall */2 :
          tmp = "x-small";
          break;
      case /* Small */3 :
          tmp = "small";
          break;
      case /* Large */4 :
          tmp = "large";
          break;
      case /* XLarge */5 :
          tmp = "x-large";
          break;
      case /* XxLarge */6 :
          tmp = "xx-large";
          break;
      case /* Smaller */7 :
          tmp = "smaller";
          break;
      case /* Larger */8 :
          tmp = "larger";
          break;
      case /* Initial */9 :
          tmp = initial;
          break;
      case /* Inherit */10 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "font-size",
          tmp
        ];
}

function fontSizeAdjust(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : opt[0].toString();
  }
  return /* tuple */[
          "font-size-adjust",
          tmp
        ];
}

function fontStretch(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* UltraCondensed */0 :
          tmp = "ultra-condensed";
          break;
      case /* ExtraCondensed */1 :
          tmp = "extra-condensed";
          break;
      case /* Condensed */2 :
          tmp = "condensed";
          break;
      case /* SemiCondensed */3 :
          tmp = "semi-condensed";
          break;
      case /* Normal */4 :
          tmp = "normal";
          break;
      case /* SemiExpanded */5 :
          tmp = "semi-expanded";
          break;
      case /* Expanded */6 :
          tmp = "expanded";
          break;
      case /* ExtraExpanded */7 :
          tmp = "extra-expanded";
          break;
      case /* UltraExpanded */8 :
          tmp = "ultra-expanded";
          break;
      case /* Initial */9 :
          tmp = initial;
          break;
      case /* Inherit */10 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "font-stretch",
          tmp
        ];
}

function fontStyle(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Italic */1 :
          tmp = "italic";
          break;
      case /* Oblique */2 :
          tmp = "oblique";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "font-style",
          tmp
        ];
}

function fontVariant(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* SmallCaps */1 :
          tmp = "small-caps";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "font-variant",
          tmp
        ];
}

function fontVariantCaps(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* SmallCaps */1 :
          tmp = "small-caps";
          break;
      case /* AllSmallCaps */2 :
          tmp = "all-small-caps";
          break;
      case /* PetiteCaps */3 :
          tmp = "petite-caps";
          break;
      case /* AllPetiteCaps */4 :
          tmp = "all-petite-caps";
          break;
      case /* Unicase */5 :
          tmp = "unicase";
          break;
      case /* TitlingCaps */6 :
          tmp = "titling-caps";
          break;
      case /* Initial */7 :
          tmp = initial;
          break;
      case /* Inherit */8 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "font-variant-caps",
          tmp
        ];
}

function fontWeight(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Bold */1 :
          tmp = "bold";
          break;
      case /* Bolder */2 :
          tmp = "bolder";
          break;
      case /* Lighter */3 :
          tmp = "lighter";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else if (opt.tag) {
    tmp = opt[0];
  } else {
    var tmp$1;
    switch (opt[0]) {
      case /* One */0 :
          tmp$1 = 100;
          break;
      case /* Two */1 :
          tmp$1 = 200;
          break;
      case /* Three */2 :
          tmp$1 = 300;
          break;
      case /* Four */3 :
          tmp$1 = 400;
          break;
      case /* Five */4 :
          tmp$1 = 500;
          break;
      case /* Six */5 :
          tmp$1 = 600;
          break;
      case /* Seven */6 :
          tmp$1 = 700;
          break;
      case /* Eight */7 :
          tmp$1 = 800;
          break;
      case /* Nine */8 :
          tmp$1 = 900;
          break;
      
    }
    tmp = String(tmp$1);
  }
  return /* tuple */[
          "font-weight",
          tmp
        ];
}

function font(fontList) {
  return $$Array.of_list(fontList).join(" ");
}

function fontFace(family, src, stretch, style, weight, unicodeRange, param) {
  var stretch$1 = fontStretch(Belt_Option.getWithDefault(stretch, /* Unsafe_set */[""]));
  var style$1 = fontStyle(Belt_Option.getWithDefault(style, /* Unsafe_set */[""]));
  var weight$1 = fontWeight(Belt_Option.getWithDefault(weight, /* Unsafe_set */Block.__(1, [""])));
  var unicodeRange$1 = Belt_Option.getWithDefault(unicodeRange, "");
  return Js_dict.fromList(/* :: */[
              /* tuple */[
                "font-family",
                family
              ],
              /* :: */[
                /* tuple */[
                  "src",
                  "url(" + (String(src) + ")")
                ],
                /* :: */[
                  stretch$1,
                  /* :: */[
                    style$1,
                    /* :: */[
                      weight$1,
                      /* :: */[
                        /* tuple */[
                          "unicode-range",
                          unicodeRange$1
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var Font = {
  fontFamily: fontFamily,
  fontFeatureSettings: fontFeatureSettings,
  fontKerning: fontKerning,
  fontSize: fontSize,
  fontSizeAdjust: fontSizeAdjust,
  fontStretch: fontStretch,
  fontStyle: fontStyle,
  fontVariant: fontVariant,
  fontVariantCaps: fontVariantCaps,
  fontWeight: fontWeight,
  font: font,
  fontFace: fontFace
};

var Grid = { };

var $$class = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class);

var grid = CamlinternalOO.create_object_opt(undefined, $$class);

var $$class$1 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$1);

var gridArea = CamlinternalOO.create_object_opt(undefined, $$class$1);

var $$class$2 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$2);

var gridAutoColumns = CamlinternalOO.create_object_opt(undefined, $$class$2);

var $$class$3 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$3);

var gridAutoFlow = CamlinternalOO.create_object_opt(undefined, $$class$3);

var $$class$4 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$4);

var gridAutoRows = CamlinternalOO.create_object_opt(undefined, $$class$4);

var $$class$5 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$5);

var gridColumn = CamlinternalOO.create_object_opt(undefined, $$class$5);

var $$class$6 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$6);

var gridColumnEnd = CamlinternalOO.create_object_opt(undefined, $$class$6);

var $$class$7 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$7);

var gridColumnGap = CamlinternalOO.create_object_opt(undefined, $$class$7);

var $$class$8 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$8);

var gridColumnStart = CamlinternalOO.create_object_opt(undefined, $$class$8);

var $$class$9 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$9);

var gridGap = CamlinternalOO.create_object_opt(undefined, $$class$9);

var $$class$10 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$10);

var gridRow = CamlinternalOO.create_object_opt(undefined, $$class$10);

var $$class$11 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$11);

var gridRowEnd = CamlinternalOO.create_object_opt(undefined, $$class$11);

var $$class$12 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$12);

var gridRowGap = CamlinternalOO.create_object_opt(undefined, $$class$12);

var $$class$13 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$13);

var gridRowStart = CamlinternalOO.create_object_opt(undefined, $$class$13);

var $$class$14 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$14);

var gridTemplate = CamlinternalOO.create_object_opt(undefined, $$class$14);

var $$class$15 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$15);

var gridTemplateAreas = CamlinternalOO.create_object_opt(undefined, $$class$15);

var $$class$16 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$16);

var gridTemplateColumns = CamlinternalOO.create_object_opt(undefined, $$class$16);

var $$class$17 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$17);

var gridTemplateRows = CamlinternalOO.create_object_opt(undefined, $$class$17);

function hangingPunctuation(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* First */1 :
          tmp = "first";
          break;
      case /* Last */2 :
          tmp = "last";
          break;
      case /* AllowEnd */3 :
          tmp = "allow-end";
          break;
      case /* ForceEnd */4 :
          tmp = "force-end";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "hanging-punctuation",
          tmp
        ];
}

var HangingPunctuation = {
  hangingPunctuation: hangingPunctuation
};

function height(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "height",
          tmp
        ];
}

var Height = {
  height: height
};

function hyphens(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Manual */1 :
          tmp = "manual";
          break;
      case /* Auto */2 :
          tmp = auto;
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "hyphens",
          tmp
        ];
}

var Hyphens = {
  hyphens: hyphens
};

function isolation(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Isolate */1 :
          tmp = "isolate";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "isolation",
          tmp
        ];
}

var Isolation = {
  isolation: isolation
};

function justifyContent(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* FlexStart */0 :
          tmp = "flex-start";
          break;
      case /* FlexEnd */1 :
          tmp = "flex-end";
          break;
      case /* Center */2 :
          tmp = "center";
          break;
      case /* SpaceBetween */3 :
          tmp = "space-between";
          break;
      case /* SpaceAround */4 :
          tmp = "space-around";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "justify-content",
          tmp
        ];
}

var JustifyContent = {
  justifyContent: justifyContent
};

function keyframe(name, frame) {
  var dict = { };
  dict[name] = Js_dict.fromList(frame);
  
}

var Keyframes = {
  keyframe: keyframe
};

function left(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "left",
          tmp
        ];
}

var Left = {
  left: left
};

function letterSpacing(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "letter-spacing",
          tmp
        ];
}

var Letter = {
  letterSpacing: letterSpacing
};

function lineHeight(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Number */0 :
          tmp = String(opt[0]);
          break;
      case /* Length */1 :
          tmp = getLength(opt[0]);
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "line-height",
          tmp
        ];
}

var Line = {
  lineHeight: lineHeight
};

function listStyleImage(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "list-style-image",
          tmp
        ];
}

function listStylePosition(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Inside */0 :
          tmp = "inside";
          break;
      case /* Outside */1 :
          tmp = "outside";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "list-style-position",
          tmp
        ];
}

function listStyleType(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Disc */0 :
          tmp = "disc";
          break;
      case /* Armenian */1 :
          tmp = "armenian";
          break;
      case /* Circle */2 :
          tmp = "circle";
          break;
      case /* CjkIdeagraphic */3 :
          tmp = "cjk-ideographic";
          break;
      case /* Decimal */4 :
          tmp = "decimal";
          break;
      case /* DecimalLeadingZero */5 :
          tmp = "decimal-leading-zero";
          break;
      case /* Georgian */6 :
          tmp = "georgian";
          break;
      case /* Hebrew */7 :
          tmp = "hebrew";
          break;
      case /* Hiragana */8 :
          tmp = "hiragana";
          break;
      case /* HiraganaIroha */9 :
          tmp = "hiragana-iroha";
          break;
      case /* Katakana */10 :
          tmp = "katakana";
          break;
      case /* KatakanaIroha */11 :
          tmp = "katakana-iroha";
          break;
      case /* LowerAlpha */12 :
          tmp = "lower-alpha";
          break;
      case /* LowerGreek */13 :
          tmp = "lower-greek";
          break;
      case /* LowerLatin */14 :
          tmp = "lower-latin";
          break;
      case /* LowerRoman */15 :
          tmp = "lower-roman";
          break;
      case /* None */16 :
          tmp = none;
          break;
      case /* Square */17 :
          tmp = "square";
          break;
      case /* UpperAlpha */18 :
          tmp = "upper-alpha";
          break;
      case /* UpperGreek */19 :
          tmp = "upper-greek";
          break;
      case /* UpperLatin */20 :
          tmp = "upper-latin";
          break;
      case /* UpperRoman */21 :
          tmp = "upper-roman";
          break;
      case /* Initial */22 :
          tmp = initial;
          break;
      case /* Inherit */23 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "list-style-type",
          tmp
        ];
}

function listStyle(styleType, position, image, param) {
  var match = listStyleType(Belt_Option.getWithDefault(styleType, /* Unsafe_set */[""]));
  var match$1 = listStylePosition(Belt_Option.getWithDefault(position, /* Unsafe_set */[""]));
  var match$2 = listStyleImage(Belt_Option.getWithDefault(image, /* Unsafe_set */Block.__(1, [""])));
  return $$String.trim("" + (String(match[1]) + (" " + (String(match$1[1]) + (" " + (String(match$2[1]) + ""))))));
}

var ListCss = {
  listStyleImage: listStyleImage,
  listStylePosition: listStylePosition,
  listStyleType: listStyleType,
  listStyle: listStyle
};

function getMargin(opt) {
  if (typeof opt !== "number") {
    if (opt.tag) {
      return opt[0];
    } else {
      return getLength(opt[0]);
    }
  }
  switch (opt) {
    case /* Auto */0 :
        return auto;
    case /* Initial */1 :
        return initial;
    case /* Inherit */2 :
        return inherit_;
    
  }
}

function marginBottom(opt) {
  return /* tuple */[
          "margin-bottom",
          getMargin(opt)
        ];
}

function marginLeft(opt) {
  return /* tuple */[
          "margin-left",
          getMargin(opt)
        ];
}

function marginRight(opt) {
  return /* tuple */[
          "margin-right",
          getMargin(opt)
        ];
}

function marginTop(opt) {
  return /* tuple */[
          "margin-top",
          getMargin(opt)
        ];
}

function margin(margins) {
  return $$Array.of_list(List.map(getLength, margins)).join(" ");
}

var Margin = {
  getMargin: getMargin,
  marginBottom: marginBottom,
  marginLeft: marginLeft,
  marginRight: marginRight,
  marginTop: marginTop,
  margin: margin
};

function getMax(opt) {
  if (typeof opt !== "number") {
    if (opt.tag) {
      return opt[0];
    } else {
      return getLength(opt[0]);
    }
  }
  switch (opt) {
    case /* None */0 :
        return none;
    case /* Initial */1 :
        return initial;
    case /* Inherit */2 :
        return inherit_;
    
  }
}

function maxHeight(opt) {
  return /* tuple */[
          "max-height",
          getMax(opt)
        ];
}

function maxWidth(opt) {
  return /* tuple */[
          "max-width",
          getMax(opt)
        ];
}

var Max = {
  getMax: getMax,
  maxHeight: maxHeight,
  maxWidth: maxWidth
};

var Media = { };

var $$class$18 = CamlinternalOO.create_table(0);

CamlinternalOO.init_class($$class$18);

var media = CamlinternalOO.create_object_opt(undefined, $$class$18);

function getMin(opt) {
  if (typeof opt === "number") {
    if (opt === /* Initial */0) {
      return initial;
    } else {
      return inherit_;
    }
  } else if (opt.tag) {
    return opt[0];
  } else {
    return getLength(opt[0]);
  }
}

function minHeight(opt) {
  return /* tuple */[
          "min-height",
          getMin(opt)
        ];
}

function minWidth(opt) {
  return /* tuple */[
          "min-width",
          getMin(opt)
        ];
}

var Min = {
  getMin: getMin,
  minHeight: minHeight,
  minWidth: minWidth
};

function mixBlendMode(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Multiply */1 :
          tmp = "multiply";
          break;
      case /* Screen */2 :
          tmp = "screen";
          break;
      case /* Overlay */3 :
          tmp = "overlay";
          break;
      case /* Darken */4 :
          tmp = "darken";
          break;
      case /* Lighten */5 :
          tmp = "lighten";
          break;
      case /* ColorDodge */6 :
          tmp = "color-dodge";
          break;
      case /* ColorBurn */7 :
          tmp = "color-burn";
          break;
      case /* Difference */8 :
          tmp = "difference";
          break;
      case /* Exclusion */9 :
          tmp = "exclusion";
          break;
      case /* Hue */10 :
          tmp = "hue";
          break;
      case /* Saturation */11 :
          tmp = "saturation";
          break;
      case /* Color */12 :
          tmp = "color";
          break;
      case /* Luminosity */13 :
          tmp = "luminosity";
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "mix-blend-mode",
          tmp
        ];
}

var MixBlendMode = {
  mixBlendMode: mixBlendMode
};

function objectFit(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Fill */0 :
          tmp = "fill";
          break;
      case /* Contain */1 :
          tmp = "contain";
          break;
      case /* Cover */2 :
          tmp = "cover";
          break;
      case /* None */3 :
          tmp = none;
          break;
      case /* ScaleDown */4 :
          tmp = "scale-down";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "object-fit",
          tmp
        ];
}

function objectPosition(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Left */0 :
          tmp = "left";
          break;
      case /* Right */1 :
          tmp = "right";
          break;
      case /* Center */2 :
          tmp = "center";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Px */0 :
          tmp = String(opt[0]) + "px";
          break;
      case /* Pct */1 :
          tmp = String(opt[0]) + "%";
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "object-position",
          tmp
        ];
}

var ObjectCss = {
  objectFit: objectFit,
  objectPosition: objectPosition
};

function opacity(o) {
  return /* tuple */[
          "opacity",
          o.toString()
        ];
}

var Opacity = {
  opacity: opacity
};

function order(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : String(opt[0])
    );
  return /* tuple */[
          "order",
          tmp
        ];
}

var Order = {
  order: order
};

function outlineColor(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Invert */0 :
          tmp = "invert";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "outline-color",
          tmp
        ];
}

function outlineOffset(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : getLength(opt[0])
    );
  return /* tuple */[
          "outline-offset",
          tmp
        ];
}

function outlineStyle(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Hidden */1 :
          tmp = "hidden";
          break;
      case /* Dotted */2 :
          tmp = "dotted";
          break;
      case /* Dashed */3 :
          tmp = "dashed";
          break;
      case /* Solid */4 :
          tmp = "solid";
          break;
      case /* Double */5 :
          tmp = "double";
          break;
      case /* Groove */6 :
          tmp = "groove";
          break;
      case /* Ridge */7 :
          tmp = "ridge";
          break;
      case /* Inset */8 :
          tmp = "inset";
          break;
      case /* Outset */9 :
          tmp = "outset";
          break;
      case /* Initial */10 :
          tmp = initial;
          break;
      case /* Inherit */11 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "outline-style",
          tmp
        ];
}

function outlineWidth(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Medium */0 :
          tmp = "medium";
          break;
      case /* Thin */1 :
          tmp = "thin";
          break;
      case /* Thick */2 :
          tmp = "thick";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "outline-width",
          tmp
        ];
}

function outline(style, width, color, param) {
  var match = outlineStyle(style);
  var match$1 = outlineWidth(Belt_Option.getWithDefault(width, /* Unsafe_set */Block.__(1, [""])));
  var match$2 = outlineColor(Belt_Option.getWithDefault(color, /* Unsafe_set */Block.__(1, [""])));
  return $$String.trim("" + (String(match[1]) + (" " + (String(match$1[1]) + (" " + (String(match$2[1]) + ""))))));
}

var Outline = {
  outlineColor: outlineColor,
  outlineOffset: outlineOffset,
  outlineStyle: outlineStyle,
  outlineWidth: outlineWidth,
  outline: outline
};

function getOverflow(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* Visible */0 :
        return "visible";
    case /* Hidden */1 :
        return "hidden";
    case /* Scroll */2 :
        return "scroll";
    case /* Auto */3 :
        return auto;
    case /* Initial */4 :
        return initial;
    case /* Inherit */5 :
        return inherit_;
    
  }
}

function overflow(opt) {
  return /* tuple */[
          "overflow",
          getOverflow(opt)
        ];
}

function overflowX(opt) {
  return /* tuple */[
          "overflow-x",
          getOverflow(opt)
        ];
}

function overflowY(opt) {
  return /* tuple */[
          "overflow-y",
          getOverflow(opt)
        ];
}

var Overflow = {
  getOverflow: getOverflow,
  overflow: overflow,
  overflowX: overflowX,
  overflowY: overflowY
};

function getPadding(opt) {
  if (typeof opt === "number") {
    if (opt === /* Initial */0) {
      return initial;
    } else {
      return inherit_;
    }
  } else if (opt.tag) {
    return opt[0];
  } else {
    return getLength(opt[0]);
  }
}

function paddingBottom(opt) {
  return /* tuple */[
          "padding-bottom",
          getPadding(opt)
        ];
}

function paddingLeft(opt) {
  return /* tuple */[
          "padding-left",
          getPadding(opt)
        ];
}

function padddingRight(opt) {
  return /* tuple */[
          "padding-right",
          getPadding(opt)
        ];
}

function paddingTop(opt) {
  return /* tuple */[
          "padding-top",
          getPadding(opt)
        ];
}

function padding(pads) {
  return $$Array.of_list(List.map(getLength, pads)).join(" ");
}

var Padding = {
  getPadding: getPadding,
  paddingBottom: paddingBottom,
  paddingLeft: paddingLeft,
  padddingRight: padddingRight,
  paddingTop: paddingTop,
  padding: padding
};

function getPageBreakBeforeAfter(opt) {
  if (typeof opt !== "number") {
    return opt[0];
  }
  switch (opt) {
    case /* Auto */0 :
        return auto;
    case /* Always */1 :
        return "always";
    case /* Avoid */2 :
        return "avoid";
    case /* Left */3 :
        return "left";
    case /* Right */4 :
        return "right";
    case /* Initial */5 :
        return initial;
    case /* Inherit */6 :
        return inherit_;
    
  }
}

function pageBreakAfter(opt) {
  return /* tuple */[
          "page-break-after",
          getPageBreakBeforeAfter(opt)
        ];
}

function pageBreakBefore(opt) {
  return /* tuple */[
          "page-break-before",
          getPageBreakBeforeAfter(opt)
        ];
}

function pageBreakInside(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Avoid */1 :
          tmp = "avoid";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "page-break-inside",
          tmp
        ];
}

var Page = {
  getPageBreakBeforeAfter: getPageBreakBeforeAfter,
  pageBreakAfter: pageBreakAfter,
  pageBreakBefore: pageBreakBefore,
  pageBreakInside: pageBreakInside
};

function perspective(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "perspective",
          tmp
        ];
}

function perspectiveOrigin(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else if (opt.tag) {
    tmp = opt[0];
  } else {
    var xAxis = getLength(opt[0]);
    var yAxis = getLength(opt[1]);
    tmp = "" + (String(xAxis) + (" " + (String(yAxis) + "")));
  }
  return /* tuple */[
          "perspective-origin",
          tmp
        ];
}

var Perspective = {
  perspective: perspective,
  perspectiveOrigin: perspectiveOrigin
};

function pointerEvents(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Auto */1 :
          tmp = auto;
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "pointer-events",
          tmp
        ];
}

var PointerEvents = {
  pointerEvents: pointerEvents
};

function position(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Static */0 :
          tmp = "static";
          break;
      case /* Absolute */1 :
          tmp = "absolute";
          break;
      case /* Fixed */2 :
          tmp = "fixed";
          break;
      case /* Relative */3 :
          tmp = "relative";
          break;
      case /* Sticky */4 :
          tmp = "sticky";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "position",
          tmp
        ];
}

var Position = {
  position: position
};

function quotes(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : $$Array.of_list(opt[0]).join(" ");
  }
  return /* tuple */[
          "quotes",
          tmp
        ];
}

var Quotes = {
  quotes: quotes
};

function resize(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Both */1 :
          tmp = "both";
          break;
      case /* Horizontal */2 :
          tmp = "horizontal";
          break;
      case /* Vertical */3 :
          tmp = "vertical";
          break;
      case /* Intiial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "resize",
          tmp
        ];
}

var Resize = {
  resize: resize
};

function right(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "right",
          tmp
        ];
}

var Right = {
  right: right
};

function scrollBehavior(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Smooth */1 :
          tmp = "smooth";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "scroll-behavior",
          tmp
        ];
}

var ScrollBehavior = {
  scrollBehavior: scrollBehavior
};

function tabSize(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else {
    switch (opt.tag | 0) {
      case /* Number */0 :
          tmp = String(opt[0]);
          break;
      case /* Length */1 :
          tmp = getLength(opt[0]);
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "tab-size",
          tmp
        ];
}

var TabSize = {
  tabSize: tabSize
};

function tableLayout(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Fixed */1 :
          tmp = "fixed";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "table-layout",
          tmp
        ];
}

var TableLayout = {
  tableLayout: tableLayout
};

function textAlign(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Left */0 :
          tmp = "left";
          break;
      case /* Right */1 :
          tmp = "right";
          break;
      case /* Center */2 :
          tmp = "center";
          break;
      case /* Justify */3 :
          tmp = "justify";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-align",
          tmp
        ];
}

function textAlignLast(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Left */1 :
          tmp = "left";
          break;
      case /* Right */2 :
          tmp = "right";
          break;
      case /* Center */3 :
          tmp = "center";
          break;
      case /* Justify */4 :
          tmp = "justify";
          break;
      case /* Start */5 :
          tmp = "start";
          break;
      case /* End */6 :
          tmp = "end";
          break;
      case /* Initial */7 :
          tmp = initial;
          break;
      case /* Inherit */8 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-align-last",
          tmp
        ];
}

function textDecorationColor(opt) {
  return /* tuple */[
          "text-decoration-color",
          typeof opt === "number" ? (
              opt !== 0 ? inherit_ : initial
            ) : opt[0]
        ];
}

function textDecorationLine(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Underline */1 :
          tmp = "underline";
          break;
      case /* Overline */2 :
          tmp = "overline";
          break;
      case /* LineThrough */3 :
          tmp = "line-through";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-decoration-line",
          tmp
        ];
}

function textDecorationStyle(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Solid */0 :
          tmp = "solid";
          break;
      case /* Double */1 :
          tmp = "double";
          break;
      case /* Dotted */2 :
          tmp = "dotted";
          break;
      case /* Dashed */3 :
          tmp = "dashed";
          break;
      case /* Wavy */4 :
          tmp = "wavy";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-decoration-style",
          tmp
        ];
}

function textDecoration(color, line, style, param) {
  var match = textDecorationColor(Belt_Option.getWithDefault(color, /* Unsafe_set */Block.__(1, [""])));
  var match$1 = textDecorationLine(Belt_Option.getWithDefault(line, /* Unsafe_set */[""]));
  var match$2 = textDecorationStyle(Belt_Option.getWithDefault(style, /* Unsafe_set */[""]));
  return $$String.trim("" + (String(match[1]) + (" " + (String(match$1[1]) + (" " + (String(match$2[1]) + ""))))));
}

function textIndent(opt) {
  var tmp;
  tmp = typeof opt === "number" ? (
      opt === /* Initial */0 ? initial : inherit_
    ) : (
      opt.tag ? opt[0] : getLength(opt[0])
    );
  return /* tuple */[
          "text-indent",
          tmp
        ];
}

function textJustify(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* InterWord */1 :
          tmp = "inter-word";
          break;
      case /* InterCharacter */2 :
          tmp = "inter-character";
          break;
      case /* None */3 :
          tmp = none;
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-justify",
          tmp
        ];
}

function textOverflow(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Clip */0 :
          tmp = "clip";
          break;
      case /* Ellipsis */1 :
          tmp = "ellipsis";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-overflow",
          tmp
        ];
}

function textShadow(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-shadow",
          tmp
        ];
}

function textTransform(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* Capitalize */1 :
          tmp = "capitalize";
          break;
      case /* Uppercase */2 :
          tmp = "uppercase";
          break;
      case /* Lowercase */3 :
          tmp = "lowercase";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "text-transform",
          tmp
        ];
}

var $$Text = {
  textAlign: textAlign,
  textAlignLast: textAlignLast,
  textDecorationColor: textDecorationColor,
  textDecorationLine: textDecorationLine,
  textDecorationStyle: textDecorationStyle,
  textDecoration: textDecoration,
  textIndent: textIndent,
  textJustify: textJustify,
  textOverflow: textOverflow,
  textShadow: textShadow,
  textTransform: textTransform
};

function top(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "top",
          tmp
        ];
}

var Top = {
  top: top
};

function transform(optList) {
  var value = List.map((function (opt) {
          if (typeof opt === "number") {
            switch (opt) {
              case /* None */0 :
                  return none;
              case /* Initial */1 :
                  return initial;
              case /* Inherit */2 :
                  return inherit_;
              
            }
          } else {
            switch (opt.tag | 0) {
              case /* Matrix */0 :
                  return "matrix(" + (String(opt[0]) + (", " + (String(opt[1]) + (", " + (String(opt[2]) + (", " + (String(opt[3]) + (", " + (String(opt[4]) + (", " + (String(opt[5]) + ")")))))))))));
              case /* Matrix3d */1 :
                  return "matrix(" + (String(opt[0]) + (", " + (String(opt[1]) + (", " + (String(opt[2]) + (", " + (String(opt[3]) + (", " + (String(opt[4]) + (", " + (String(opt[5]) + (", " + (String(opt[6]) + (", " + (String(opt[7]) + (", " + (String(opt[8]) + (", " + (String(opt[9]) + (", " + (String(opt[10]) + (", " + (String(opt[11]) + (", " + (String(opt[12]) + (", " + (String(opt[13]) + (", " + (String(opt[14]) + (", " + (String(opt[15]) + ")")))))))))))))))))))))))))))))));
              case /* Translate */2 :
                  var x = getLength(opt[0]);
                  var y = getLength(opt[1]);
                  return "translate(" + (String(x) + (", " + (String(y) + ")")));
              case /* Translate3d */3 :
                  var x$1 = getLength(opt[0]);
                  var y$1 = getLength(opt[1]);
                  var z = getLength(opt[2]);
                  return "translate3d(" + (String(x$1) + (", " + (String(y$1) + (", " + (String(z) + ")")))));
              case /* TranslateX */4 :
                  var x$2 = getLength(opt[0]);
                  return "translateX(" + (String(x$2) + ")");
              case /* TranslateY */5 :
                  var y$2 = getLength(opt[0]);
                  return "translateY(" + (String(y$2) + ")");
              case /* TranslateZ */6 :
                  var z$1 = getLength(opt[0]);
                  return "translateZ(" + (String(z$1) + ")");
              case /* Scale */7 :
                  var x$3 = opt[0].toString();
                  var y$3 = opt[1].toString();
                  return "scale(" + (String(x$3) + (", " + (String(y$3) + ")")));
              case /* Scale3d */8 :
                  var x$4 = opt[0].toString();
                  var y$4 = opt[1].toString();
                  var z$2 = opt[2].toString();
                  return "scale3d(" + (String(x$4) + (", " + (String(y$4) + (", " + (String(z$2) + ")")))));
              case /* ScaleX */9 :
                  var x$5 = opt[0].toString();
                  return "scaleX(" + (String(x$5) + ")");
              case /* ScaleY */10 :
                  var y$5 = opt[0].toString();
                  return "scaleY(" + (String(y$5) + ")");
              case /* ScaleZ */11 :
                  var z$3 = opt[0].toString();
                  return "scaleZ(" + (String(z$3) + ")");
              case /* Rotate */12 :
                  return "rotate(" + (String(opt[0]) + ")");
              case /* Rotate3d */13 :
                  var x$6 = opt[0].toString();
                  var y$6 = opt[1].toString();
                  var z$4 = opt[2].toString();
                  return "rotate3d(" + (String(x$6) + (", " + (String(y$6) + (", " + (String(z$4) + (", " + (String(opt[3]) + ")")))))));
              case /* RotateX */14 :
                  return "rotateX(" + (String(opt[0]) + ")");
              case /* RotateY */15 :
                  return "rotateY(" + (String(opt[0]) + ")");
              case /* RotateZ */16 :
                  return "rotateZ(" + (String(opt[0]) + ")");
              case /* Skew */17 :
                  return "skew(" + (String(opt[0]) + (", " + (String(opt[1]) + ")")));
              case /* SkewX */18 :
                  return "skewX(" + (String(opt[0]) + ")");
              case /* SkewY */19 :
                  return "skewY(" + (String(opt[0]) + ")");
              case /* Perspective */20 :
                  return "perspective(" + (String(opt[0]) + ")");
              case /* Unsafe_set */21 :
                  return opt[0];
              
            }
          }
        }), optList);
  return /* tuple */[
          "transform",
          value
        ];
}

function transformOrigin(opt) {
  var tmp;
  if (typeof opt === "number") {
    tmp = opt === /* Initial */0 ? initial : inherit_;
  } else {
    switch (opt.tag | 0) {
      case /* TwoD */0 :
          tmp = "" + (String(opt[0]) + (" " + (String(opt[1]) + "")));
          break;
      case /* ThreeD */1 :
          tmp = "" + (String(opt[0]) + (" " + (String(opt[1]) + (" " + (String(opt[2]) + "")))));
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "transform-origin",
          tmp
        ];
}

function transformStyle(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Flat */0 :
          tmp = "flat";
          break;
      case /* Preserve3D */1 :
          tmp = "perserve-3d";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "transform-style",
          tmp
        ];
}

var Transform = {
  transform: transform,
  transformOrigin: transformOrigin,
  transformStyle: transformStyle
};

function getTransitionDelayDuration(opt) {
  if (typeof opt === "number") {
    if (opt === /* Initial */0) {
      return initial;
    } else {
      return inherit_;
    }
  }
  switch (opt.tag | 0) {
    case /* Sec */0 :
        var sec = String(opt[0]);
        return "" + (String(sec) + "s");
    case /* MS */1 :
        var ms = String(opt[0]);
        return "" + (String(ms) + "ms");
    case /* Time */2 :
    case /* Unsafe_set */3 :
        return opt[0];
    
  }
}

function transitionDelay(opt) {
  return /* tuple */[
          "transition-delay",
          getTransitionDelayDuration(opt)
        ];
}

function transitionDuration(opt) {
  return /* tuple */[
          "transition-duration",
          getTransitionDelayDuration(opt)
        ];
}

function transitionProperty(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* None */0 :
          tmp = none;
          break;
      case /* All */1 :
          tmp = "all";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Properties */1 :
          tmp = $$Array.of_list(opt[0]).join(", ");
          break;
      case /* Property */0 :
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "transition-property",
          tmp
        ];
}

function transitionTimingFunction(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Ease */0 :
          tmp = "ease";
          break;
      case /* Linear */1 :
          tmp = "linear";
          break;
      case /* EaseIn */2 :
          tmp = "ease-in";
          break;
      case /* EaseOut */3 :
          tmp = "ease-out";
          break;
      case /* EaseInOut */4 :
          tmp = "ease-in-out";
          break;
      case /* StepStart */5 :
          tmp = "step-start";
          break;
      case /* StepEnd */6 :
          tmp = "step-end";
          break;
      case /* Initial */7 :
          tmp = initial;
          break;
      case /* Inherit */8 :
          tmp = inherit_;
          break;
      
    }
  } else {
    switch (opt.tag | 0) {
      case /* Steps */0 :
          var step = opt[1] ? "end" : "start";
          tmp = "step(" + (String(opt[0]) + (", " + (String(step) + ")")));
          break;
      case /* CubicBezier */1 :
          var x1 = opt[0].toString();
          var y1 = opt[1].toString();
          var x2 = opt[2].toString();
          var y2 = opt[3].toString();
          tmp = "cubic-bezier(" + (String(x1) + (", " + (String(y1) + (", " + (String(x2) + (", " + (String(y2) + ")")))))));
          break;
      case /* Unsafe_set */2 :
          tmp = opt[0];
          break;
      
    }
  }
  return /* tuple */[
          "transition-timing-function",
          tmp
        ];
}

function transition(property, duration, timing, delay, param) {
  var match = transitionProperty(Belt_Option.getWithDefault(property, /* Unsafe_set */Block.__(2, [""])));
  var duration$1 = getTransitionDelayDuration(Belt_Option.getWithDefault(duration, /* Unsafe_set */Block.__(3, [""])));
  var match$1 = transitionTimingFunction(Belt_Option.getWithDefault(timing, /* Unsafe_set */Block.__(2, [""])));
  var delay$1 = getTransitionDelayDuration(Belt_Option.getWithDefault(delay, /* Unsafe_set */Block.__(3, [""])));
  return $$String.trim("" + (String(match[1]) + (" " + (String(duration$1) + (" " + (String(match$1[1]) + (" " + (String(delay$1) + ""))))))));
}

var Transition = {
  getTransitionDelayDuration: getTransitionDelayDuration,
  transitionDelay: transitionDelay,
  transitionDuration: transitionDuration,
  transitionProperty: transitionProperty,
  transitionTimingFunction: transitionTimingFunction,
  transition: transition
};

function unicodeBidi(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Embed */1 :
          tmp = "embed";
          break;
      case /* BidiOverride */2 :
          tmp = "bidi-override";
          break;
      case /* Isolate */3 :
          tmp = "isolate";
          break;
      case /* IsolateOverride */4 :
          tmp = "isolate-override";
          break;
      case /* PlainText */5 :
          tmp = "plain-text";
          break;
      case /* Initial */6 :
          tmp = initial;
          break;
      case /* Inherit */7 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "unicode-bidi",
          tmp
        ];
}

var UnicodeBidi = {
  unicodeBidi: unicodeBidi
};

function userSelect(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* None */1 :
          tmp = none;
          break;
      case /* Text */2 :
          tmp = "text";
          break;
      case /* All */3 :
          tmp = "all";
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "user-select",
          tmp
        ];
}

var UserSelect = {
  userSelect: userSelect
};

function verticalAlign(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Baseline */0 :
          tmp = "baseline";
          break;
      case /* Sub */1 :
          tmp = "sub";
          break;
      case /* Super */2 :
          tmp = "super";
          break;
      case /* Top */3 :
          tmp = "top";
          break;
      case /* TextTop */4 :
          tmp = "text-top";
          break;
      case /* Middle */5 :
          tmp = "middle";
          break;
      case /* Bottom */6 :
          tmp = "bottom";
          break;
      case /* TextBottom */7 :
          tmp = "text-bottom";
          break;
      case /* Initial */8 :
          tmp = initial;
          break;
      case /* Inherit */9 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "vertical-align",
          tmp
        ];
}

var VerticalAlign = {
  verticalAlign: verticalAlign
};

function visibility(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Visible */0 :
          tmp = "visible";
          break;
      case /* Hidden */1 :
          tmp = "hidden";
          break;
      case /* Collapse */2 :
          tmp = "collapse";
          break;
      case /* Initial */3 :
          tmp = initial;
          break;
      case /* Inherit */4 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "visibility",
          tmp
        ];
}

var Visibility = {
  visibility: visibility
};

function whiteSpace(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Nowrap */1 :
          tmp = "nowrap";
          break;
      case /* Pre */2 :
          tmp = "pre";
          break;
      case /* PreLine */3 :
          tmp = "pre-line";
          break;
      case /* PreWrap */4 :
          tmp = "pre-wrap";
          break;
      case /* Initial */5 :
          tmp = initial;
          break;
      case /* Inherit */6 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "white-space",
          tmp
        ];
}

var WhiteSpace = {
  whiteSpace: whiteSpace
};

function width(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "width",
          tmp
        ];
}

var Width = {
  width: width
};

function wordBreak(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* BreakAll */1 :
          tmp = "break-all";
          break;
      case /* KeepAll */2 :
          tmp = "keep-all";
          break;
      case /* BreakWord */3 :
          tmp = "break-word";
          break;
      case /* Initial */4 :
          tmp = initial;
          break;
      case /* Inherit */5 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "word-break",
          tmp
        ];
}

function wordSpacing(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : getLength(opt[0]);
  }
  return /* tuple */[
          "word-spacing",
          tmp
        ];
}

function wordWrap(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Normal */0 :
          tmp = "normal";
          break;
      case /* BreakWord */1 :
          tmp = "break-word";
          break;
      case /* Initial */2 :
          tmp = initial;
          break;
      case /* Inherit */3 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "word-wrap",
          tmp
        ];
}

var Word = {
  wordBreak: wordBreak,
  wordSpacing: wordSpacing,
  wordWrap: wordWrap
};

function writingMode(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* HorizontalTb */0 :
          tmp = "horizontal-tb";
          break;
      case /* VerticalRl */1 :
          tmp = "vertical-rl";
          break;
      case /* VerticalLr */2 :
          tmp = "vertical-lr";
          break;
      
    }
  } else {
    tmp = opt[0];
  }
  return /* tuple */[
          "writing-mode",
          tmp
        ];
}

var WritingMode = {
  writingMode: writingMode
};

function zIndex(opt) {
  var tmp;
  if (typeof opt === "number") {
    switch (opt) {
      case /* Auto */0 :
          tmp = auto;
          break;
      case /* Initial */1 :
          tmp = initial;
          break;
      case /* Inherit */2 :
          tmp = inherit_;
          break;
      
    }
  } else {
    tmp = opt.tag ? opt[0] : String(opt[0]);
  }
  return /* tuple */[
          "z-index",
          tmp
        ];
}

var ZIndex = {
  zIndex: zIndex
};

var borderBottomStyle = borderBottomeStyle;

var clip = clipPath;

var paddingRight = padddingRight;

export {
  clsx ,
  toFloat ,
  toInt ,
  toStr ,
  css ,
  create ,
  getClassName ,
  useStyles ,
  makeGlobalStyles ,
  makeStyles ,
  makeThemeStyles ,
  auto ,
  initial ,
  inherit_ ,
  none ,
  unset ,
  Length ,
  TimingFunctions ,
  Align ,
  All ,
  Animation ,
  alignContent ,
  alignItems ,
  alignSelf ,
  all ,
  animation ,
  animationDelay ,
  animationDirection ,
  animationDuration ,
  animationFillMode ,
  animationIterationCount ,
  animationName ,
  animationPlayState ,
  animationTimingFunction ,
  Backface ,
  backfaceVisibilty ,
  Background ,
  background ,
  backgroundAttachment ,
  backgroundBlendMode ,
  backgroundClip ,
  backgroundColor ,
  backgroundImage ,
  backgroundOrigin ,
  backgroundPosition ,
  backgroundRepeat ,
  backgroundSize ,
  Border ,
  border ,
  borderBottom ,
  borderBottomColor ,
  borderBottomLeftRadius ,
  borderBottomRightRadius ,
  borderBottomStyle ,
  borderBottomWidth ,
  borderCollapse ,
  borderColor ,
  borderImage ,
  borderImageOutset ,
  borderImageRepeat ,
  borderImageSlice ,
  borderImageSource ,
  borderImageWidth ,
  borderLeft ,
  borderLeftColor ,
  borderLeftStyle ,
  borderLeftWidth ,
  borderRadius ,
  borderRight ,
  borderRightColor ,
  borderRightStyle ,
  borderRightWidth ,
  borderSpacing ,
  borderStyle ,
  borderTop ,
  borderTopColor ,
  borderTopLeftRadius ,
  borderTopRightRadius ,
  borderTopStyle ,
  borderTopWidth ,
  borderWidth ,
  Bottom ,
  bottom ,
  Box ,
  boxDecorationBreak ,
  boxShadow ,
  boxSizing ,
  Break ,
  breakAfter ,
  breakBefore ,
  breakInside ,
  Caption ,
  captionSide ,
  Caret ,
  caretColor ,
  charset ,
  Clear ,
  clear ,
  Clip ,
  clip ,
  clipPath ,
  Color ,
  color ,
  Column ,
  columnCount ,
  columnFill ,
  columnGap ,
  columnRule ,
  columnRuleColor ,
  columnRuleStyle ,
  columnRuleWidth ,
  columnSpan ,
  columnWidth ,
  columns ,
  Content ,
  content ,
  Counter ,
  counterIncrement ,
  counterReset ,
  Cursor ,
  cursor ,
  Direction ,
  direction ,
  Display ,
  display ,
  EmptyCells ,
  emptyCells ,
  Filter ,
  filter ,
  Flex ,
  flex ,
  flexBasis ,
  flexDirection ,
  flexFlow ,
  flexGrow ,
  flexShrink ,
  flexWrap ,
  Float ,
  $$float ,
  Font ,
  font ,
  fontFace ,
  fontFamily ,
  fontFeatureSettings ,
  fontKerning ,
  fontSize ,
  fontSizeAdjust ,
  fontStretch ,
  fontStyle ,
  fontVariant ,
  fontVariantCaps ,
  fontWeight ,
  Grid ,
  grid ,
  gridArea ,
  gridAutoColumns ,
  gridAutoFlow ,
  gridAutoRows ,
  gridColumn ,
  gridColumnEnd ,
  gridColumnGap ,
  gridColumnStart ,
  gridGap ,
  gridRow ,
  gridRowEnd ,
  gridRowGap ,
  gridRowStart ,
  gridTemplate ,
  gridTemplateAreas ,
  gridTemplateColumns ,
  gridTemplateRows ,
  HangingPunctuation ,
  hangingPunctuation ,
  Height ,
  height ,
  Hyphens ,
  hyphens ,
  Isolation ,
  isolation ,
  JustifyContent ,
  justifyContent ,
  Keyframes ,
  Left ,
  left ,
  Letter ,
  letterSpacing ,
  Line ,
  lineHeight ,
  ListCss ,
  listStyle ,
  listStyleImage ,
  listStylePosition ,
  listStyleType ,
  Margin ,
  margin ,
  marginBottom ,
  marginLeft ,
  marginRight ,
  marginTop ,
  Max ,
  maxHeight ,
  maxWidth ,
  Media ,
  media ,
  Min ,
  minHeight ,
  minWidth ,
  MixBlendMode ,
  mixBlendMode ,
  ObjectCss ,
  objectFit ,
  objectPosition ,
  Opacity ,
  opacity ,
  Order ,
  order ,
  Outline ,
  outline ,
  outlineColor ,
  outlineOffset ,
  outlineStyle ,
  outlineWidth ,
  Overflow ,
  overflow ,
  overflowX ,
  overflowY ,
  Padding ,
  padding ,
  paddingBottom ,
  paddingLeft ,
  paddingRight ,
  paddingTop ,
  Page ,
  pageBreakAfter ,
  pageBreakBefore ,
  pageBreakInside ,
  Perspective ,
  perspective ,
  perspectiveOrigin ,
  PointerEvents ,
  pointerEvents ,
  Position ,
  position ,
  Quotes ,
  quotes ,
  Resize ,
  resize ,
  Right ,
  right ,
  ScrollBehavior ,
  scrollBehavior ,
  TabSize ,
  tabSize ,
  TableLayout ,
  tableLayout ,
  $$Text ,
  textAlign ,
  textAlignLast ,
  textDecoration ,
  textDecorationColor ,
  textDecorationLine ,
  textDecorationStyle ,
  textIndent ,
  textJustify ,
  textOverflow ,
  textShadow ,
  textTransform ,
  Top ,
  top ,
  Transform ,
  transform ,
  transformOrigin ,
  transformStyle ,
  Transition ,
  transition ,
  transitionDelay ,
  transitionDuration ,
  transitionProperty ,
  transitionTimingFunction ,
  UnicodeBidi ,
  unicodeBidi ,
  UserSelect ,
  userSelect ,
  VerticalAlign ,
  verticalAlign ,
  Visibility ,
  visibility ,
  WhiteSpace ,
  whiteSpace ,
  Width ,
  width ,
  Word ,
  wordBreak ,
  wordSpacing ,
  wordWrap ,
  WritingMode ,
  writingMode ,
  ZIndex ,
  zIndex ,
  
}
/* class Not a pure module */
